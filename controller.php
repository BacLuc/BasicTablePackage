<?php

namespace Concrete\Package\BaclucC5Crud;

defined('C5_EXECUTE') or die(_("Access Denied."));


use Concrete\Core\Block\BlockType\BlockType;
use Concrete\Core\Package\Package;
use Concrete\Package\BaclucC5Crud\DiscriminatorEntry\DiscriminatorListener;
use Core;
use Doctrine\ORM\EntityManager;
use Punic\Exception;

class Controller extends Package
{

    const PACKAGE_HANDLE = 'bacluc_c5_crud';
    protected $pkgHandle          = self::PACKAGE_HANDLE;
    protected $appVersionRequired = '5.7.4';
    protected $pkgVersion         = '0.0.1';


    public static function getEntityManagerStatic()
    {
        $pkg = Package::getByHandle(self::PACKAGE_HANDLE);
        return $pkg->getEntityManager();
    }

    /**
     * @param EntityManager $em
     * Because Doctrine itself requires on the topmost entity a discriminatormap with all subentities,
     *  we add here a EventListener when Doctrine Parses the Annotations.
     *  This DiscriminatorListener scans the Annotations of Child Classes of BaseEntity for
     * @DiscriminatorEntry(value="Namespace\Classname") and adds them to the Discriminator Map,
     * So that you don't have to define the Cildren in the topmost parent class.
     */
    public static function addDiscriminatorListenerToEm(EntityManager $em)
    {
        if (!$em->DiscriminatorListenerAttached) {
            $em->getEventManager()->addEventSubscriber(new DiscriminatorListener($em));
            $em->DiscriminatorListenerAttached = true;
        }
    }

    public function getPackageName()
    {
        return t("BaclucCrudPackage");
    }

    public function getPackageDescription()
    {
        return t("Package to provide a basic CRUD from DB to GUI");
    }

    public function getPackageAutoloaderRegistries()
    {
        return ["src" => "BaclucC5Crud"];
    }

    public function install()
    {
        require_once $this->getPackagePath() . '/vendor/autoload.php';
        $em = $this->getEntityManager();
        //begin transaction, so when block install fails, but parent::install was successfully, you don't have to uninstall the package
        $em->getConnection()->beginTransaction();
        try {

            $pkg = parent::install();
            $em = $this->getEntityManager();
            BlockType::installBlockType("bacluc_crud", $pkg);

            $em->getConnection()->commit();
        } catch (Exception $e) {
            $em->getConnection()->rollBack();

            throw $e;
        }


    }

    /**
     * @return EntityManager
     * @overrides Package::getEntityManager
     * if the Package is installed, this function calls static::addDiscriminatorListenerToEm on the EntityManager
     * To add support for @DiscriminatorEntry Annotation
     * Only after Installation, because else the Classes to Support this are not found
     */
    public function getEntityManager()
    {
        $em = parent::getEntityManager(); // TODO: Change the autogenerated stub
        return $em;
    }

    public function uninstall()
    {
        $block = BlockType::getByHandle("bacluc_crud");
        $em = $this->getEntityManager();

        //begin transaction, so when block install fails, but parent::install was successfully, you don't have to uninstall the package
        $em->getConnection()->beginTransaction();
        try {
            if (is_object($block)) {
                $blockId = $block->getBlockTypeID();
                $db = Core::make('database');
                //delete of blocktype not in orm way, because there is no entity BlockType
                $db->query("DELETE FROM BlockTypes WHERE btID = ?", array($blockId));
            }
            parent::uninstall();
            $em->getConnection()->commit();
        } catch (Exception $e) {
            $em->getConnection()->rollBack();

            throw $e;
        }
    }

    public function on_start()
    {
        require_once $this->getPackagePath() . '/vendor/autoload.php';
    }


}

